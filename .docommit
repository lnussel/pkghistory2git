#!/usr/bin/perl -w
use Date::Parse;
use Time::Zone;

use strict;

my $zone;

sub parse_suse {
  $_ = $_[0];

  my $dline;
  my $dt = $1;
  my $who = $2;
  $dt = lc($dt);
  $who =~ s/^\s+//;
  $who =~ s/^-\s*//;
  $dt =~ /([0-9][0-9][0-9][0-9])/;
  $dline = $_;
  my $year = $1;
  if (!defined($zone) && $dt =~ /\s([a-z]{3,4})(dst)?\s[0-9]{4}/) {
    my $dst = $2;
    $zone = tz_offset($1);
    $zone += 3600 if defined($zone) && $dst;
  }
  my $tdt = str2time($dt);
  $dt =~ /([0-9]+)/;
  my $day = $1;
  if (!$tdt) {
    if ($dt =~ /([a-z]{3})\s+([a-z]{3})/) {
      $tdt = str2time("$1 $2 $day $year");
    }
  }
  if (!$tdt) {
    if ($dt =~ /([a-z]{3})/) {
      $tdt = str2time("$1 $day $year");
    }
  }
  if (!$tdt) {
    $tdt = str2time("$year-1-1");
  }
  $tdt += 12 * 3600 unless $dt =~ /\d:\d/;	# 12:00 if not specified
  $tdt += ($zone || 0);
  my $ok = 1;
  my $change = '';
  while(<CHANGES>) {
    chomp;
    last if /^(?:\* )?([A-Za-z]+\s+[A-Za-z]+\s+[0-9].*[0-9][0-9][0-9][0-9])(.*\@.*$)/;
    next if (/^--------------/);
    next if (/^========================/);
    s/\s+$//;
    next if $_ eq '';
    s/^\s*-/-/ if $ok == 1;	# obsolete?
    s/^\s*\*\s*/  * /;
    if (!/^-/) {
      s/^\s+-\s*/  - /;
      s/^\s*/  / unless s/^    \s*/    /;
    }
    $change .= "$_\n";
    $ok = 2;
  }
  return ($_, $tdt, $dline, $who, $change);
}

my $rev = shift @ARGV || die "specify revision";

open (CHANGES, '<', '.msg') || die "can't open .msg: $!\n";

while(<CHANGES>) {
	next if (/^\s+$/);
	next if (/^--------------/);
	last;
}

my @changes;
my $error;
while(defined $_) {
	if (/^(?:\* )?([A-Za-z]+\s+[A-Za-z]+\s+[0-9].*[0-9][0-9][0-9][0-9])(.*\@.*$)/) {
		chomp;
		my ($_, $t, $dline, $who, $changes) = parse_suse($_);
		push @changes, [$dline, $changes, $t, $who];
	} else {
		$error = 1;
		chomp;
		push @changes, [undef, $_, undef];
		$_ = <>;
	}
}
close CHANGES;

my %mailmap;

if (open (F, '<', '.mailmap')) {
	while (<F>) {
		chomp;
		next if /^#/;
		my ($a, $n) = split(/\t/);
		next unless $a;
		next unless $n;
		$mailmap{$a} = $n;
	}
	close F;
}

my $msg = '';
if (@changes != 1 || $error) {
	for (@changes) {
		$ENV{'GIT_AUTHOR_NAME'} = "Various";
		$ENV{'GIT_AUTHOR_EMAIL'} = 'nobody@suse.de';
		$msg .= "revision $rev\n\n" if $rev;
		$rev = undef;
		$msg .= $_->[0]. "\n\n" if $_->[0];
		$msg .= $_->[1]. "\n";
		$msg .= "-------------------------------------------------------------------\n" if $_->[0];
	}
	$msg = 'initial commit' unless $msg;
} else {
	my $addr = $changes[0]->[3];
	if ($addr && !$mailmap{$addr}) {
		my $name;
		while (!$name) {
			print "Enter real name for $addr:\n";
			$name = <STDIN>;
			chomp $name;
		}
		$mailmap{$addr} = $name;
		if (open (O, '>>', '.mailmap')) {
			print O "$addr\t$name\n";
			close O;
		}
	}
	$ENV{'GIT_AUTHOR_NAME'} = $mailmap{$addr} || "Unknown";
	$ENV{'GIT_AUTHOR_EMAIL'} = $changes[0]->[3];
	$ENV{'GIT_AUTHOR_DATE'} = $changes[0]->[2];
	$msg .= $changes[0]->[1] if $changes[0]->[1];
}
open (F, '|-', "git", "commit", '-F-', @ARGV) or die "$!\n";
print F $msg;
close F;
#open (O, ">>/tmp/foo");
#print O join("/", @ARGV), "\n";
#close O;
